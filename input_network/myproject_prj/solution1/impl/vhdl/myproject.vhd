-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_in_1_input_ap_vld : IN STD_LOGIC;
    dense_in_1_input : IN STD_LOGIC_VECTOR (31 downto 0);
    layer9_out_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer9_out_0_ap_vld : OUT STD_LOGIC;
    layer9_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer9_out_1_ap_vld : OUT STD_LOGIC;
    layer9_out_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer9_out_2_ap_vld : OUT STD_LOGIC;
    layer9_out_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer9_out_3_ap_vld : OUT STD_LOGIC;
    layer9_out_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer9_out_4_ap_vld : OUT STD_LOGIC;
    layer9_out_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer9_out_5_ap_vld : OUT STD_LOGIC;
    layer9_out_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer9_out_6_ap_vld : OUT STD_LOGIC;
    layer9_out_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer9_out_7_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_myproject,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.802500,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=390,HLS_SYN_LUT=1783,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal dense_in_1_input_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal dense_in_1_input_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dense_in_1_input_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_in_1_input_ap_vld_preg : STD_LOGIC := '0';
    signal dense_in_1_input_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer3_out_reg_390 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal layer3_out_1_reg_395 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_2_reg_400 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer5_out_reg_405 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer5_out_1_reg_410 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer5_out_2_reg_415 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer5_out_3_reg_420 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer5_out_4_reg_425 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer5_out_5_reg_430 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer7_out_reg_435 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer7_out_1_reg_440 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer7_out_2_reg_445 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer7_out_3_reg_450 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer7_out_4_reg_455 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer7_out_5_reg_460 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer8_out_reg_465 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer8_out_1_reg_470 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer8_out_2_reg_475 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer8_out_3_reg_480 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer8_out_4_reg_485 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer8_out_5_reg_490 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer8_out_6_reg_495 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_ready : STD_LOGIC;
    signal call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_ready : STD_LOGIC;
    signal call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_ready : STD_LOGIC;
    signal call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_ready : STD_LOGIC;
    signal call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_ready : STD_LOGIC;
    signal call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_ready : STD_LOGIC;
    signal call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_ready : STD_LOGIC;
    signal call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_ready : STD_LOGIC;
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_val : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121 : component myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s
    port map (
        ap_ready => call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_ready,
        data_val => dense_in_1_input_in_sig,
        ap_return_0 => call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_return_0,
        ap_return_1 => call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_return_1,
        ap_return_2 => call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_return_2);

    call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127 : component myproject_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s
    port map (
        ap_ready => call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_ready,
        data_4_val => call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_return_0,
        data_5_val => call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_return_1,
        data_7_val => call_ret1_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_fu_121_ap_return_2,
        ap_return_0 => call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_return_0,
        ap_return_1 => call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_return_1,
        ap_return_2 => call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_return_2);

    call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134 : component myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s
    port map (
        ap_ready => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_ready,
        data_4_val => layer3_out_reg_390,
        data_5_val => layer3_out_1_reg_395,
        data_7_val => layer3_out_2_reg_400,
        ap_return_0 => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_0,
        ap_return_1 => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_1,
        ap_return_2 => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_2,
        ap_return_3 => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_3,
        ap_return_4 => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_4,
        ap_return_5 => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_5);

    call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141 : component myproject_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s
    port map (
        ap_ready => call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_ready,
        data_0_val => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_0,
        data_1_val => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_1,
        data_2_val => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_2,
        data_3_val => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_3,
        data_4_val => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_4,
        data_5_val => call_ret3_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_134_ap_return_5,
        ap_return_0 => call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_0,
        ap_return_1 => call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_1,
        ap_return_2 => call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_2,
        ap_return_3 => call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_3,
        ap_return_4 => call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_4,
        ap_return_5 => call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_5);

    call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151 : component myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s
    port map (
        ap_ready => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_ready,
        data_0_val => layer5_out_reg_405,
        data_1_val => layer5_out_1_reg_410,
        data_2_val => layer5_out_2_reg_415,
        data_3_val => layer5_out_3_reg_420,
        data_4_val => layer5_out_4_reg_425,
        data_5_val => layer5_out_5_reg_430,
        ap_return_0 => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_0,
        ap_return_1 => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_1,
        ap_return_2 => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_2,
        ap_return_3 => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_3,
        ap_return_4 => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_4,
        ap_return_5 => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_5);

    call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161 : component myproject_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s
    port map (
        ap_ready => call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_ready,
        data_0_val => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_0,
        data_1_val => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_1,
        data_2_val => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_2,
        data_3_val => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_3,
        data_4_val => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_4,
        data_5_val => call_ret5_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_fu_151_ap_return_5,
        ap_return_0 => call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_0,
        ap_return_1 => call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_1,
        ap_return_2 => call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_2,
        ap_return_3 => call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_3,
        ap_return_4 => call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_4,
        ap_return_5 => call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_5);

    call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171 : component myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s
    port map (
        ap_ready => call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_ready,
        data_0_val => layer7_out_reg_435,
        data_1_val => layer7_out_1_reg_440,
        data_2_val => layer7_out_2_reg_445,
        data_3_val => layer7_out_3_reg_450,
        data_4_val => layer7_out_4_reg_455,
        data_5_val => layer7_out_5_reg_460,
        ap_return_0 => call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_0,
        ap_return_1 => call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_1,
        ap_return_2 => call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_2,
        ap_return_3 => call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_3,
        ap_return_4 => call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_4,
        ap_return_5 => call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_5,
        ap_return_6 => call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_6);

    call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181 : component myproject_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s
    port map (
        ap_ready => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_ready,
        data_0_val => layer8_out_reg_465,
        data_1_val => layer8_out_1_reg_470,
        data_3_val => layer8_out_2_reg_475,
        data_4_val => layer8_out_3_reg_480,
        data_5_val => layer8_out_4_reg_485,
        data_6_val => layer8_out_5_reg_490,
        data_7_val => layer8_out_6_reg_495,
        ap_return_0 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_0,
        ap_return_1 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_1,
        ap_return_2 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_2,
        ap_return_3 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_3,
        ap_return_4 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_4,
        ap_return_5 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_5,
        ap_return_6 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    dense_in_1_input_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dense_in_1_input_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    dense_in_1_input_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (dense_in_1_input_ap_vld = ap_const_logic_1))) then 
                    dense_in_1_input_ap_vld_preg <= dense_in_1_input_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    dense_in_1_input_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dense_in_1_input_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (dense_in_1_input_ap_vld = ap_const_logic_1))) then 
                    dense_in_1_input_preg <= dense_in_1_input;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                layer3_out_1_reg_395 <= call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_return_1;
                layer3_out_2_reg_400 <= call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_return_2;
                layer3_out_reg_390 <= call_ret2_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_127_ap_return_0;
                layer5_out_1_reg_410 <= call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_1;
                layer5_out_2_reg_415 <= call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_2;
                layer5_out_3_reg_420 <= call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_3;
                layer5_out_4_reg_425 <= call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_4;
                layer5_out_5_reg_430 <= call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_5;
                layer5_out_reg_405 <= call_ret4_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config5_s_fu_141_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                layer7_out_1_reg_440 <= call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_1;
                layer7_out_2_reg_445 <= call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_2;
                layer7_out_3_reg_450 <= call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_3;
                layer7_out_4_reg_455 <= call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_4;
                layer7_out_5_reg_460 <= call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_5;
                layer7_out_reg_435 <= call_ret6_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config7_s_fu_161_ap_return_0;
                layer8_out_1_reg_470 <= call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_1;
                layer8_out_2_reg_475 <= call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_2;
                layer8_out_3_reg_480 <= call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_3;
                layer8_out_4_reg_485 <= call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_4;
                layer8_out_5_reg_490 <= call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_5;
                layer8_out_6_reg_495 <= call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_6;
                layer8_out_reg_465 <= call_ret7_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config8_s_fu_171_ap_return_0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, dense_in_1_input_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((dense_in_1_input_ap_vld_in_sig = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, dense_in_1_input_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((dense_in_1_input_ap_vld_in_sig = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, dense_in_1_input_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((dense_in_1_input_ap_vld_in_sig = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(dense_in_1_input_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (dense_in_1_input_ap_vld_in_sig = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_in_1_input_ap_vld_in_sig_assign_proc : process(dense_in_1_input_ap_vld, dense_in_1_input_ap_vld_preg)
    begin
        if ((dense_in_1_input_ap_vld = ap_const_logic_1)) then 
            dense_in_1_input_ap_vld_in_sig <= dense_in_1_input_ap_vld;
        else 
            dense_in_1_input_ap_vld_in_sig <= dense_in_1_input_ap_vld_preg;
        end if; 
    end process;


    dense_in_1_input_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, dense_in_1_input_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_in_1_input_blk_n <= dense_in_1_input_ap_vld;
        else 
            dense_in_1_input_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dense_in_1_input_in_sig_assign_proc : process(dense_in_1_input_ap_vld, dense_in_1_input, dense_in_1_input_preg)
    begin
        if ((dense_in_1_input_ap_vld = ap_const_logic_1)) then 
            dense_in_1_input_in_sig <= dense_in_1_input;
        else 
            dense_in_1_input_in_sig <= dense_in_1_input_preg;
        end if; 
    end process;

    layer9_out_0 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_0;

    layer9_out_0_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer9_out_0_ap_vld <= ap_const_logic_1;
        else 
            layer9_out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer9_out_1 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_1;

    layer9_out_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer9_out_1_ap_vld <= ap_const_logic_1;
        else 
            layer9_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer9_out_2 <= ap_const_lv16_0;

    layer9_out_2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer9_out_2_ap_vld <= ap_const_logic_1;
        else 
            layer9_out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer9_out_3 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_2;

    layer9_out_3_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer9_out_3_ap_vld <= ap_const_logic_1;
        else 
            layer9_out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer9_out_4 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_3;

    layer9_out_4_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer9_out_4_ap_vld <= ap_const_logic_1;
        else 
            layer9_out_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer9_out_5 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_4;

    layer9_out_5_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer9_out_5_ap_vld <= ap_const_logic_1;
        else 
            layer9_out_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer9_out_6 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_5;

    layer9_out_6_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer9_out_6_ap_vld <= ap_const_logic_1;
        else 
            layer9_out_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer9_out_7 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config9_s_fu_181_ap_return_6;

    layer9_out_7_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer9_out_7_ap_vld <= ap_const_logic_1;
        else 
            layer9_out_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
